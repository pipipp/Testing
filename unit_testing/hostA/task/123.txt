该项目旨在使用Python Socket网络编程来设计和实现大型
高效的灵活可靠（LEFT）文件共享。从本课程的名称中，您可以获取
本课程要求：
可用包：os, sys, socket, struct, hashlib, math, tqdm, numpy
大：
•格式：任何格式，包括隐藏的文件和文件夹
•大小：单个文件最大为1GB
高效：
•快速：越快越好
•自动：更改的文件可以自动同步
•部分更新：部分更改的文件可以部分更新
•压缩：可以使用压缩来减小总大小
灵活：
•IP地址应设置为参数
•从中断中恢复
可靠：
•任何文件均无错误
•错误恢复而无需重新传输
•数据传输安全

您可以决定以下项目：
应用层协议：
•不允许实施HTTP。
传输层协议：
•TCP；或UDP;或混合。
建筑：
•C / S；或P2P；或混合。
端口号：
•可以使用20000到30000之间的任何端口。
•您可以使用一个或多个端口。

应该提交什么：
代码：
•Python 3；
•您的应用程序可以使用多个Python脚本来实现；
•但是只有一个应用程序。 “客户端”和“服务器”之间没有区别。


您的应用（您只有一个应用带有一个python代码文件或多个python代码）
复制到3个虚拟机：VMA，VMB和VMC，具有相同的设置；
2.对于每个虚拟机，您的应用程序将启动为：

python3 main.py --ip 192.168.xxx.xxx，192.168.xxx.xxx 5

3. VMA将启动并正在运行6
。它应该运行无任何错误（RUN_A）。
4.我将文件1大约10MB添加到当前工作目录7
。
5. VMB将启动而没有错误（RUN_B）。您在VMB中的应用将获得文件1。我将
检查文件1的md5（MD5_1B）记录耗时（TC_1B）。
6. VMC将启动且无错误（RUN_C）。您在VMC中的应用将获得文件1。
检查文件1的md5（MD5_1C）记录耗时（TC_1C）。
7.我将在当前工作中添加大约1GB的文件2和一个包含50个小文件的文件夹（任何名称）
VMB目录。
8.文件2和包含50个小文件的文件夹应开始与VMA和VMC同步。
9.在第7步的2秒后，VMA上的应用程序将被我杀死。
10.所有文件和文件夹将在VMC上同步。我将检查文件2的md5
（MD5_2C）和文件夹（MD5_FC）中每个文件的md5，并记录
文件2（TC_2C）和文件夹（TC_FC）。
11.我将在VMA上重新启动该应用程序。所有文件和文件夹将在VMC上同步。一世
将检查文件2（md5_2A）的md5和文件夹（MD5_FA）中每个文件的md5，然后
记录文件2（TC_2A）和文件夹（TC_FA）的耗时。
12.我将使用随机二进制数据将大约200MB的文件3添加到当前的工作目录中
VMC。
13.文件3将在VMA和VMB上同步。
14.我将用VMC上文件3的其他随机二进制数据替换大约0.1％的连续区域8。
15.更新后的文件3将在VMA和VMB上部分同步。我将检查md5
VMA和VMB（MD5_3A，MD5_3B）上文件3的记录并记录文件3的耗时
在VMA和VMB（TC_3A，TC_3B）上。
16.压缩将不会直接进行测试。但是File 2会很容易压缩到很小
尺寸。如果实施压缩，您将从TC_2A和TC_2C中受益。
17.数据安全性不会直接测试。我将检查您的代码。由于加密会浪费时间，
请使用“ --encryption yes”参数打开加密功能。 （ENC